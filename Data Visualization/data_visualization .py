# -*- coding: utf-8 -*-
"""Data Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fZVYUWRw5ogQi-9I8ZLVczVD-5Yvrrxl

# Data Visualization - Matplotlib


---
##Application on the Iris Dataset
**Objective:**

In this notebook, how we can create plots using python Matplotlib library.

##Dataset Description
- **sepal length (cm)**
- **sepal width (cm)** 	
- **petal length (cm)** 	
- **petal width (cm)** 	
- **target:**	Setosa (0), VersiColour (1), and Virginica (2)

### Import necessary python modules (libraries)
"""

# Commented out IPython magic to ensure Python compatibility.
# basic libraries
import numpy as np
import pandas as pd
from sklearn import datasets
import matplotlib.pyplot as plt

# additional methods from matplotlib
from matplotlib import markers
import matplotlib.patches as patches
from mpl_toolkits.mplot3d import Axes3D
# %matplotlib inline 
#This line is a magic command that tells Jupyter Notebook to display plots inline in the notebook instead of opening them in a separate window.

"""### Import Dataset"""

iris = datasets.load_iris()
iris

iris = datasets.load_iris() #Loads the Iris dataset from scikit-learn's datasets module and assigns it to the variable iris.
df= pd.DataFrame(data= np.c_[iris['data'], iris['target']], # ".c_" concatenates the two numpy arrays along second axis (ie. columns)
# resulting in a 2-dimensional array where each row represents an observation and each column represents a feature or the target variable.
                 columns= iris['feature_names'] + ['target'])
df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)
#Converts the target variable (which is currently represented as an integer) into a categorical variable with three categories (the three species of Iris in the dataset)
df.head()

"""![alt text](https://www.researchgate.net/profile/Wolfgang-Engelmann/publication/265877256/figure/fig3/AS:669555605114885@1536645904238/Flower-of-a-plant-with-peduncle-a-calyx-consisting-of-sepals-petals-stamen-and-in.png)

[Image source](https://www.researchgate.net/figure/Flower-of-a-plant-with-peduncle-a-calyx-consisting-of-sepals-petals-stamen-and-in_fig3_265877256)

# WORKING WITH MATPLOTLIB

### 1. Scatter plot 
- Scatter plot shows how much one variable is affected by the another, it show relationship (called correlation) between 2 variables
- The closer the data points come when plotted to making a straight line, the higher the correlation between the two variables
- If the line goes from the small x,y value out to high x- and y-values, then the variables are said to have a positive correlation.
- If the line goes from a high-value on the y-axis down to a high-value on the x-axis, the variables have a negative correlation.
- It can provide more information by mapping color/shape/size  of plotted dot to a third variable.

1.1 Basic Plot
"""

#Basic plot
plt.plot( 'sepal length (cm)', 'sepal width (cm)', data=df, linestyle='none', marker='o')
plt.xlabel('sepal length (cm)')
plt.ylabel('sepal width (cm)')
plt.title('Relationship between sepal length & width')
plt.show()

"""There is no relation between sepal length (cm) & sepal width (cm)"""

plt.plot( 'sepal length (cm)', 'petal length (cm)', data=df, linestyle='none', marker='o')
plt.xlabel('sepal length (cm)')
plt.ylabel('petal length (cm)')
plt.title('Relationship between sepal & petal length')
plt.show()

"""There is a weak positive relation between sepal length (cm) & petal length (cm)"""

plt.plot( 'sepal length (cm)', 'petal width (cm)', data=df, linestyle='none', marker='o')
plt.xlabel('sepal length (cm)')
plt.ylabel('sepal width (cm)')
plt.title('Relationship between sepal length & width')
plt.show()

"""There is no relation between sepal length (cm) & petal width (cm)"""

plt.plot( 'sepal width (cm)', 'petal length (cm)', data=df, linestyle='none', marker='o')
plt.xlabel('sepal width (cm)')
plt.ylabel('petal length (cm)')
plt.title('Relationship between sepal width & petal length')
plt.show()

"""There is no relation between sepal width (cm) & petal length (cm)"""

plt.plot( 'sepal width (cm)', 'petal width (cm)', data=df, linestyle='none', marker='o')
plt.xlabel('sepal width (cm)')
plt.ylabel('petal width (cm)')
plt.title('Relationship between sepal & petal width')
plt.show()

"""There is no relation between sepal width (cm) & petal width (cm)"""

plt.plot( 'petal length (cm)', 'petal width (cm)', data=df, linestyle='none', marker='o')
plt.xlabel('petal length (cm)')
plt.ylabel('petal width (cm)')
plt.title('Relationship between petal length & width')
plt.show()

"""There is weak positive relation between petal length (cm) & petal width (cm)

1.2 Customization Plot
"""

# Custmization map marker style to species column in df, this plot shows relationship between sepal length & width 
#along with the class for each specified dot

# to see all possibilities:
#print(markers.MarkerStyle.markers.keys())
 
# set the limit of x and y axis: the lim set the axis extending between min, max
#plt.xlim(min,max)
#plt.ylim(min,max)
 
# remove ticks and values of axis: Ticks are the markers denoting data points on axes
#plt.xticks([])
#plt.yticks([])

plt.xlabel('sepal length (cm)')
plt.ylabel('sepal width (cm)')
plt.title('Relationship between sepal length & width')

mapping = {'virginica' : 'o', 'versicolor': 'x', 'setosa': '+'}
s=df['species'].map(mapping)

# Make a loop to add markers one by one
for i in range(len(df['sepal length (cm)'])):
 plt.plot(df['sepal length (cm)'][i], df['sepal width (cm)'][i],marker=s[i],markerfacecolor='blue', markersize=10, markeredgecolor="black",markeredgewidth=1)
plt.show()

"""You can change markerstyle of plotted dot by specifying various param in plt.plot

    1. specify mark style using marker param
    2. To change marker size, just use the markersize argument…
    3. The color is controlled by the markerfacecolor and markeredgecolor arguments.
    4. You can control marker edge width and color.

You can add text to each plotted point using 

`plt.text(x,y,text,horizantal align of text, size of text, color of text, textStyle)`

"""

# custmoization adding annotation to scatter plot
plt.plot( 'sepal length (cm)', 'sepal width (cm)', data=df, linestyle='none', marker='o')
 
# Annotate with text + Arrow
plt.annotate(
# Label and coordinate
'This point is interesting!', xy=(5.1, 3.5), xytext=(6,3.8),
 
# Custom arrow
arrowprops=dict(facecolor='black', shrink=0.05)
)

# customization adding shapes to show region of intersect 
# Plot
fig1 = plt.figure()
ax1 = fig1.add_subplot(111)
ax1.plot( 'sepal length (cm)', 'sepal width (cm)', data=df, linestyle='none', marker='o')
 
# Add rectangle
ax1.add_patch(
  patches.Rectangle( # u can use patches.Circle OR patches.Ellipse
  (5, 2), # (x,y)
  1, # width
  1, # height
  0, # You can add rotation as well with 'angle'
  alpha=0.3, facecolor="red", edgecolor="black", linewidth=3, linestyle='solid'
  ))

#customization adding segment
plt.plot( 'sepal length (cm)', 'sepal width (cm)', data=df, linestyle='none', marker='o')
 
# Annotation
plt.axvline(5.5, color='r')
plt.axhline(3, color='green')

"""### 2. Bubble plot 
- A bubble chart (aka bubble plot) is an extension of the scatter plot used to look at relationships between three numeric variables.
- The variables’ values for each point are indicated by horizontal position, vertical position, and dot size.
- Note that too many bubble make the chart hard to read, so this type of representation is usually not recommended for big amount of data.
- Note that the area of the circles must be proportional to the value, not to the radius, to avoid exaggerate the variation in your data
"""

# use the scatter function  since bubble plot is very close to a scatterplot.
# we will use  ‘s‘ argument to map a third numerical variable to the color of the marker.

#we will use species column to set the color and size of bubbles
color={'virginica' : 'red', 'versicolor': 'blue', 'setosa': 'green'}
size=df.species.value_counts()
print(size)

plt.scatter(df['sepal length (cm)'], df['sepal width (cm)'], s=df.groupby('species')['species'].transform('count'), c=df.species.map(color), marker='o',linewidth=1, alpha=0.5)
plt.xlabel('sepal length (cm)')
plt.ylabel('sepal width (cm)')
plt.title('Bubble plot showing relation across sepal length, sepal width, & Iris class')
plt.show()

"""1. specify the color of bubbles using c arg
2. specify the shape of bubble using marker arg
3. specify edge width using linewidth arg

### 3. 2D Density plot 
- 2D density plot or  2D histogram is an extension of the well known histogram.
- It shows the distribution of values in a data set across the range of two quantitative variables.
- It is really useful to avoid over plotting in a scatterplot.
- If you have too many dots, the 2D density plot counts the number of observations within a particular area of the 2D space.
"""

# Create a figure with 6 plot areas
fig, axes = plt.subplots(ncols=3, nrows=1, figsize=(21, 5))
 
# Everything sarts with a Scatterplot
axes[0].set_title('Scatterplot')
axes[0].plot(df['sepal length (cm)'], df['sepal width (cm)'], 'ko')
 
# Thus we can cut the plotting window in several hexbins
nbins = 20
axes[1].set_title('Hexbin')
axes[1].hexbin(df['sepal length (cm)'], df['sepal width (cm)'], gridsize=nbins, cmap=plt.cm.BuGn_r)
 
# 2D Histogram
axes[2].set_title('2D Histogram')
axes[2].hist2d(df['sepal length (cm)'], df['sepal width (cm)'], bins=nbins, cmap=plt.cm.BuGn_r)

fig.show()

"""### 4. Box plot 
- A boxplot is a standardized way of displaying the distribution of data based on a five number summary (“minimum”, first quartile (Q1), median, third quartile (Q3), and “maximum”).
- It can tell you about your outliers and what their values are.
- It can tell  if and how your data is skewed.

4.1 Basic Plot
"""

plt.boxplot(df['sepal length (cm)'])
plt.ylabel('sepal length (cm)')
plt.title('Sepal Length Box plot')

"""sepal length:
1. has no outliers
2. negatively skewed: median closest to the max
3. not symmetric: whiskers are no equals

"""

plt.boxplot(df['sepal width (cm)'])
plt.ylabel('sepal width (cm)')
plt.title('Sepal width Box plot')

"""sepal width:
1. has outliers
2. postively skewed: median closest to the min
3. not symmetric: whiskers are no equals
"""

plt.boxplot(df['petal length (cm)'])
plt.ylabel('petal length (cm)')
plt.title('petal Length Box plot')

"""petal length:
1. has no outliers
2. negatively skewed: median closest to the max
3. not symmetric: whiskers are no equals, distance between median &1Q, median &3Q are not equal
"""

plt.boxplot(df['petal width (cm)'])
plt.ylabel('petal width (cm)')
plt.title('petal width Box plot')

"""petal width:
1. has no outliers
2. negatively skewed: median closest to the min
3. not symmetric: whiskers are no equals, distance between median &1Q, median &3Q are not equal

4.2 customization
"""

# draw all boxplots on one graph
plt.boxplot([df['petal width (cm)'],df['petal length (cm)'],df['sepal width (cm)'],df['sepal length (cm)']], labels=['petal width', 'petal length','sepal width','sepal length'])
plt.show()

"""vertical and horizontal plots can be created through the parameter **vert**. By default the value of the **vert** parameter is True, which creates a vertical plot."""

# draw petal width group by species
df.species.value_counts()
virginica = df[df['species']=='virginica']['sepal length (cm)']
versicolor = df[df['species']=='versicolor']['sepal length (cm)']
setosa = df[df['species']=='setosa']['sepal length (cm)']

plt.boxplot([virginica,versicolor,setosa], labels=['virginica','versicolor','setosa'], vert=False)
plt.ylabel('sepal length')
plt.show()

# change color
box = plt.boxplot([df['petal width (cm)'],df['petal length (cm)'],df['sepal width (cm)'],df['sepal length (cm)']], notch=True, patch_artist=True, labels=['petal width', 'petal length','sepal width','sepal length'])
colors = ['blue', 'green', 'purple', 'tan']

for patch, color in zip(box['boxes'], colors):
    patch.set_facecolor(color)
plt.show()

fig, ax = plt.subplots(figsize=(13,10))
plt.suptitle('')
df.boxplot(['petal width (cm)','petal length (cm)','sepal width (cm)','sepal length (cm)'],by=['species'],ax=ax)
plt.show()

"""### 5. Violin plot 

- Allow to visualize the distribution of a numeric variable for one or several groups.
- Violins are particularly adapted when the amount of **data is huge** and showing individual observations gets impossible.
- Violin plots are similar to box plots, except that they also show the probability density of the data at different values.
- A violin plot combines two aspects of a distribution in a single visualization:
    1. The features of a Box Plot: Median, Interquartile Distance
    2. The Probability Density Function

5.1 Basic Plot
"""

print(df['sepal length (cm)'].describe())

plt.violinplot(df['sepal length (cm)'])
plt.ylabel('sepal length')

"""As you can see, we have a higher density between 5 and 6. Higher density at mean value 5.84."""

print(df['sepal width (cm)'].describe())

plt.violinplot(df['sepal width (cm)'])
plt.ylabel('sepal width')

"""Higher density is at the mean = 3.05"""

print(df['petal length (cm)'].describe())

plt.violinplot(df['petal length (cm)'])
plt.ylabel('petal length')

"""The values are not clustered around the mean(3.7). The values are clustered around the min & max."""

print(df['petal width (cm)'].describe())

plt.violinplot(df['petal width (cm)'])
plt.ylabel('petal width')

"""The values are not clustered around the mean (1.1). The values are clustered around the min & max.

5.2 Customization Plot
"""

# show median, mean, extrem
plt.violinplot(df['sepal length (cm)'],showmeans=True, showextrema=True, showmedians=True)
plt.show()

# plot horizantally
plt.violinplot(df['sepal length (cm)'],showmeans=True, showextrema=True, showmedians=True, vert=False)
plt.show()

fig, ax = plt.subplots(figsize=(10,10))
ax.violinplot([df['petal width (cm)'],df['petal length (cm)'],df['sepal width (cm)'],df['sepal length (cm)']])
ax.set_xticks([1, 2, 3, 4])
ax.set_xticklabels(['petal width', 'petal length','sepal width','sepal length'])

# draw petal width grouped by species
df.species.value_counts()
# create separate dataframe of sepal length for each class 
virginica = df[df['species']=='virginica']['sepal length (cm)']
versicolor = df[df['species']=='versicolor']['sepal length (cm)']
setosa = df[df['species']=='setosa']['sepal length (cm)']

fig, ax = plt.subplots(figsize=(10,10))
ax.violinplot([virginica,versicolor,setosa])
ax.set_xticks([1, 2, 3])
ax.set_xticklabels(['virginica', 'versicolor','setosa'])
plt.ylabel('sepal length')
plt.show()

"""### 7. 1D Histogram plot
- A frequency distribution shows how often each different value in a set of data occurs.
- It takes only set of numeric values as input.
- The variable is cut into several bins, and the number of observation per bin is represented by the height of the bar.

7.1 Basic Plot
"""

plt.hist(df['sepal length (cm)'], 16) # 16 is the number of bins
plt.title('sepal length histogram')
plt.show()

plt.hist(df['sepal width (cm)'], 16)
plt.title('sepal width histogram')
plt.show()

plt.hist(df['petal length (cm)'], 16)
plt.title('petal length histogram')
plt.show()

plt.hist(df['petal width (cm)'], 16)
plt.title('petal width histogram')
plt.show()

"""7.2 Customization Plot"""

plt.hist(df['sepal width (cm)'], 16, facecolor='green', alpha=0.3) # alpha parameter defines transparency
plt.title('sepal width histogram')
plt.show()

"""### 8. 3D scatter plot 

"""

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['sepal width (cm)'], df['sepal length (cm)'], df['petal width (cm)'], c='skyblue', s=60) # s parameter defines marker size
ax.view_init(30, 185)
plt.show()

"""### 8. 3D bar plot 

"""

fig = plt.figure()
ax1 = fig.add_subplot(111, projection='3d')
# define axes 
dx = np.ones(len(df['sepal width (cm)']))
dy = np.ones(len( df['sepal length (cm)']))
dz = np.ones(len(df['petal width (cm)']))
ax1.bar3d(df['sepal width (cm)'], df['sepal length (cm)'], df['petal width (cm)'], dx, dy, dz, color='#00ceaa')
plt.show()

"""### 8. 3D surface plot """

# Make the plot
fig = plt.figure()
ax = fig.add_subplot(projection='3d')
ax.plot_trisurf(df['sepal width (cm)'], df['sepal length (cm)'], df['petal width (cm)'], cmap=plt.cm.viridis)
plt.show()

fig = plt.figure()
ax = fig.add_subplot(projection='3d')

# to Add a color bar which maps values to colors.
surf=ax.plot_trisurf(df['sepal width (cm)'], df['sepal length (cm)'], df['petal width (cm)'], cmap=plt.cm.viridis)
fig.colorbar(surf, shrink=0.5, aspect=5)
plt.show()

fig = plt.figure()
ax = fig.add_subplot(projection='3d')

# to Add a color bar which maps values to colors.
surf=ax.plot_trisurf(df['sepal width (cm)'], df['sepal length (cm)'], df['petal width (cm)'], cmap=plt.cm.viridis)
fig.colorbar(surf, shrink=0.5, aspect=5)

# Rotate it
ax.view_init(30, 45)
plt.show()

fig = plt.figure()
ax = fig.add_subplot(projection='3d')

# Other palette
ax.plot_trisurf(df['sepal width (cm)'], df['sepal length (cm)'], df['petal width (cm)'], cmap=plt.cm.jet)
plt.show()